@model SaleManagement.Protal.Models.Order.OrderViewModel
@using SaleManagement.Core.Models
@using Dickson.Core.Common.Extensions
@{
    Layout = null;
}
<style type="text/css">
    .upload-btn {
        display: inline-block;
        overflow: hidden;
        position: relative;
    }

        .upload-btn input {
            cursor: pointer;
            font-size: 100%;
            height: 100%;
            opacity: 0;
            position: absolute;
            right: 0;
            top: 0;
            z-index: 2;
        }

    .fa-spinner:before {
        content: "\f110";
    }

    .form-group span{
        margin-top:5px;
    }
    .form-group label{ 
    }
</style>

<input type="hidden" name="attachmentIds" id="attachmentIds" />
<input type="hidden" value="@User.IdentityType" name="identityType" id="identityType" />
@Html.HiddenFor(model => model.Id)
@Html.AntiForgeryToken()
<div class="form-group">
    <div class="col-md-12">
        <div class="attachment">
            <ul data-bind="foreach:files" class="thumbnails gallery">
                <li class="thumbnail">
                    <a class="cboxElement" href="javascript:void(0)"><img data-bind="text:name,attr:{src:url}" style="display: block;"></a>
                    <div class="well gallery-controls">
                        <a data-bind="click:$parent.deleteFile" href="javascript:void(0)" class="gallery-delete btn"><i class="glyphicon glyphicon-remove"></i></a>
                    </div>
                </li>
            </ul>
        </div>
    </div>
    <div class="col-md-2"></div>
    <div class="col-md-10">
        <a class="upload-btn btn btn-danger" href="javascript:void(0);" role="button" data-toggle="popover" data-container="body" data-placement="bottom" data-original-title="" title="">
            提交款式图片
            <input type="file" name="file">
        </a>
        <span style="color:red">最多可上传2个，每个不超过4M</span>
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4"><span class="text-danger">*</span>品类：</label>
    <div class="col-md-10 col-xs-8" id="divProductCategory">
        @foreach (var category in Model.ProductCategories)
        {
            var currentClass = category.Id == Model.ProductCategoryId ? "btn btn-default btn-sm btn-primary" : "btn btn-sm btn-default";
            <span class="@currentClass"  data-value="@category.Id">@category.Name</span>
        }
        @Html.HiddenFor(model => model.ProductCategoryId)
        @Html.ValidationMessageFor(model => model.ProductCategoryId, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group" id="divHandSize" style="display:none">
    <label class="control-label col-md-2 col-xs-4">手寸：</label>
    <div class="col-md-2 col-xs-8">
        @Html.TextBoxFor(model => model.HandSize, new { Class = "form-control" })
        @Html.ValidationMessageFor(model => model.HandSize, "", new { @class = "text-danger" })


    </div>
</div>
<div class="form-group" id="divChain"  style="display:none">
    <label class="control-label col-md-2 col-xs-4">链长：</label>
    <div class="col-md-1 col-xs-3">
        @Html.TextBoxFor(model => model.MinChainLength, new { Class = "form-control" })
        @Html.ValidationMessageFor(model => model.MinChainLength, "", new { @class = "text-danger" })
    </div>
    <div style="float:left">
        -
    </div>
    <div class="col-md-1 col-xs-3">
        @Html.TextBoxFor(model => model.MaxChainLength, new { Class = "form-control" })
        @Html.ValidationMessageFor(model => model.MaxChainLength, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4"><span class="text-danger">*</span>成色：</label>
    <div class="col-md-10 col-xs-8">
        @foreach (var colorForm in Model.ColorForms)
        {
            var currentClass = colorForm.Id == Model.ColorFormId ? "btn btn-sm btn-default btn-primary" : "btn btn-sm  btn-default";
            <span class="@currentClass" name="btnSpan" data-value="@colorForm.Id">@colorForm.Name</span>
        }
        @Html.HiddenFor(model => model.ColorFormId)
        @Html.ValidationMessageFor(model => model.ColorFormId, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4"><span class="text-danger">*</span>宝石品类：</label>
    <div class="col-md-10 col-xs-8">
        @foreach (var gemCategory in Model.GemCategories)
        {
            var currentClass = gemCategory.Id == Model.GemCategoryId ? "btn btn-sm btn-default btn-primary" : "btn btn-sm btn-default";
            <span class="@currentClass" name="btnSpan" data-value="@gemCategory.Id">@gemCategory.Name</span>
        }
        @Html.HiddenFor(model => model.GemCategoryId)
        @Html.ValidationMessageFor(model => model.GemCategoryId, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4"><span class="text-danger">*</span>件数：</label>
    <div class="col-md-2 col-xs-8">
        @Html.TextBoxFor(model => model.Number, new { @class = "form-control", placeholder = "请输入件数" })
        @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4"><span class="text-danger">*</span>主石大小（ct）：</label>
    <div class="col-md-2 col-xs-8">
        @Html.TextBoxFor(model => model.MainStoneSize, new { @class = "form-control number", placeholder = "请输入主石大小" })
        @Html.ValidationMessageFor(model => model.MainStoneSize, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4">证书号：</label>
    <div class="col-md-2 col-xs-8">
        @Html.TextBoxFor(model => model.Certificate, new { @class = "form-control", placeholder = "请输入证书号" })
        @Html.ValidationMessageFor(model => model.Certificate, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4">字印要求(成色+主副石重)：</label>
    <div class="col-md-2 col-xs-8">
        @Html.TextBoxFor(model => model.WordsPrinted, new { @class = "form-control", placeholder = "请输入字印要求" })
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4">主石镶口要求：</label>
    <div class="col-md-6 col-xs-8">
        @{
            var RabbetRequirementsList = EnumExtensions.EnumToList(typeof(RabbetRequirement));
        }
        @foreach (var item in RabbetRequirementsList)
        {
            var currentClass = item.Key == (int)Model.RabbetRequirement ? "btn btn-sm btn-default btn-primary" : "btn btn-sm btn-default";
            <span class="@currentClass" name="btnSpan" data-value="@item.Key">@item.Value</span>
        }
        @Html.HiddenFor(model => model.RabbetRequirement)
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4">客来石描述：</label>
    <div class="col-md-6 col-xs-8">
        @{
            var stoneDescribeList = EnumExtensions.EnumToList(typeof(StoneDescribe));
        }
        @foreach (var item in stoneDescribeList)
        {
            var currentClass = item.Key == (int)Model.StoneDescribe ? "btn btn-sm btn-default btn-primary" : "btn btn-sm btn-default";
            <span class="@currentClass" name="btnSpan" data-value="@item.Key">@item.Value</span>
        }
        @Html.HiddenFor(model => model.StoneDescribe)
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4">金重控制要求：</label>
    <div class="col-md-6 col-xs-8">
        @{
            var goldWeightRequirementList = EnumExtensions.EnumToList(typeof(GoldWeightRequirement));
        }
        @foreach (var item in goldWeightRequirementList)
        {
            var currentClass = item.Key == (int)Model.GoldWeightRequirement ? "btn btn-sm btn-default btn-primary" : "btn btn-sm btn-default";
            <span class="@currentClass" name="btnSpan" data-value="@item.Key">@item.Value</span>
        }
        @Html.HiddenFor(model => model.GoldWeightRequirement)
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4">副石控制要求：</label>
    <div class="col-md-6 col-xs-8">
        @{
            var sideStoneRequiredmentList = EnumExtensions.EnumToList(typeof(SideStoneRequiredment));
        }
        @foreach (var item in sideStoneRequiredmentList)
        {
            var currentClass = item.Key == (int)Model.SideStoneRequiredment ? "btn btn-sm btn-default btn-primary" : "btn btn-sm btn-default";
            <span class="@currentClass" name="btnSpan" data-value="@item.Key">@item.Value</span>
        }
        @Html.HiddenFor(model => model.SideStoneRequiredment)
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2 col-xs-4">戒臂内弧要求：</label>
    <div class="col-md-6 col-xs-8">
        @{
            var radianRequirementList = EnumExtensions.EnumToList(typeof(RadianRequirement));
        }
        @foreach (var item in radianRequirementList)
        {
            var currentClass = item.Key == (int)Model.RadianRequirement ? "btn btn-sm btn-default btn-primary" : "btn btn-sm btn-default";
            <span class="@currentClass" name="btnSpan" data-value="@item.Key">@item.Value</span>
        }
        @Html.HiddenFor(model => model.RadianRequirement)
    </div>
</div>
<div class="form-group">
    <label for="Gender" class="control-label col-md-2 col-xs-4">有无旧料：</label>
    <div class="col-md-4 col-xs-8">
        <label class="m-r-10">@Html.RadioButton("HasOldMaterial", false, !Model.HasOldMaterial) 无</label>
        <label>@Html.RadioButton("HasOldMaterial", true, Model.HasOldMaterial)有</label>
    </div>
</div>
<div class="form-group">
    <label for="Gender" class="control-label col-md-2 col-xs-4">备注：</label>
    <div class="col-md-4 col-xs-8">
        @Html.TextAreaFor(m => m.Remark, new { @class = "form-control", rows = "3", placeholder = "客户留言" })
    </div>
</div>
<div class="form-group text-center">
    <button type="submit" id="saveOrder" class="btn btn-primary text-center">@(string.IsNullOrEmpty(Model.Id)?"下单":"保存")</button>
</div>
@{
    var jsonItems = Model.Attachments.Select(item => string.Format("{{name:\"{0}\",length:\"{1}\",id:\"{2}\",url:\"{3}\"}}",
        item.Name, item.Length, item.Id, item.Url)).ToList();
}
<script type="text/javascript">
    var filesData = [@Html.Raw(string.Join(",", jsonItems))];
</script>